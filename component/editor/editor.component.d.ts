import { AfterViewInit, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { DomRenderer } from '../common/dom';
import { ControlValueAccessor } from '@angular/forms';
export declare class EditorComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {
    domRenderer: DomRenderer;
    renderer2: Renderer2;
    buttons: any;
    style: any;
    toolbar: boolean;
    readonly: boolean;
    gif: boolean;
    cache: boolean;
    cacheTime: boolean;
    maxHeight: any;
    counter: boolean;
    undoManager: boolean;
    containerViewChild: ElementRef;
    toolbarViewChild: ElementRef;
    editorViewChild: ElementRef;
    modalViewChild: ElementRef;
    linkPopupViewChild: ElementRef;
    tablePopupViewChild: ElementRef;
    linkPopup: HTMLDivElement;
    tablePopup: HTMLDivElement;
    linkUrl: HTMLInputElement;
    container: HTMLDivElement;
    toolbarElem: HTMLDivElement;
    et: HTMLDivElement;
    text: string;
    selectedRange: any;
    modal: any;
    defaultButtons: any;
    toolbarButtons: any;
    heading: string[];
    emotions: string[];
    tds: number[];
    stack: any[];
    historyValue: any;
    capacity: number;
    stackIndex: number;
    lastTime: any;
    stackTimeoutId: any;
    isHeadingShow: boolean;
    isModalShow: boolean;
    isColorpickerShow: boolean;
    isLinkShow: boolean;
    isUploadShow: boolean;
    isEmotionShow: boolean;
    isLinkPopupShow: boolean;
    isFontSizeShow: boolean;
    isImageLink: boolean;
    isTableShow: boolean;
    isTablePopupShow: boolean;
    isAlignShow: boolean;
    isWriting: boolean;
    colorType: string;
    foreColor: string;
    backColor: string;
    currentButton: any;
    color: string;
    face: number;
    path: string;
    toolbarHeight: number;
    cacheContent: any;
    cacheInterval: any;
    cacheTip: boolean;
    toolButtons: any;
    currentLinkElem: any;
    fullscreen: boolean;
    contentLength: number;
    fontSize: any;
    currentFontSize: any;
    selectedRow: number;
    selectedCol: number;
    etClickListener: any;
    documentClickListener: any;
    onMouseleaveListener: any;
    onValueChangedEvent: any;
    onValueChangedListener: any;
    _startPosition: any;
    _endPosition: any;
    alignButtons: any[];
    alignIcon: string;
    currentPosition: any;
    onModelChange: Function;
    onTouchedChange: Function;
    constructor(domRenderer: DomRenderer, renderer2: Renderer2);
    ngAfterViewInit(): void;
    writeValue(value: string): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    init(): void;
    setSize(value: any): string;
    getButtons(): void;
    getCounter(): void;
    initSelection(newLine?: boolean): void;
    toggleFullScreen(btn: any): void;
    execCommand(command: any, param?: any): void;
    queryCommandValue(name: any): string;
    queryCommandState(name: any): boolean;
    getCurrentRange(range?: any): any;
    saveSelection(): void;
    restoreSelection(range?: any): void;
    setRangeAtStartOf(node: any, range?: any): void;
    createRangeByElem(elem: any, toStart?: boolean, isContent?: boolean): void;
    isSelectionEmpty(): boolean;
    getSelectionText(): any;
    getSelectionContainerElem(range?: any): any;
    onUploadChange(e: any): void;
    uploadImage(value: string): void;
    resetImage(): void;
    openModal(): void;
    closeModal(): void;
    closePopup(): void;
    createTable(index: number): string;
    findElement(elem: any, tag: string): any;
    getTdLocation(): any;
    resetCell(): void;
    deleteTable(): void;
    deleteRow(): void;
    deleteColumn(): void;
    addRow(position: number): void;
    addColumn(position: number): void;
    undo(btn: HTMLElement): void;
    redo(btn: HTMLElement): void;
    updateState(): number;
    updateStack(wait?: number): void;
    getNodeLength(node: any): any;
    resetCaretPosition(): any;
    getIndex(node: any): number;
    getRangePosition(type: string): any[];
    startPosition(): any;
    endPosition(): any;
    getNodeByPosition(position: any): any;
    caretPosition(caret?: any): any;
    onTdMouseenter(index: number): void;
    onTdMousedown(index: number): void;
    onMenuButtonClick(event: any, button: any, btn: any): void;
    changeMenuActive(containerElem: any): void;
    onHeadingClick(head: string): void;
    onLinkConfirm(value: string): void;
    onEmotionClick(event: any): void;
    onColorChange(event: any): void;
    onColorpickerClick(): void;
    changeFontSize(event: any, value: number): void;
    getHTML(): void;
    startCache(): void;
    stopCache(): void;
    getNodename(elem: any): any;
    changeLink(target?: any): void;
    getPopupPosition(currentElem: any, popupElem: HTMLDivElement): void;
    onLinkChange(value: string, width: string, height: string): void;
    onTableDropdown(showElem: HTMLUListElement, hideElem: HTMLUListElement): void;
    isInEditor(event: any): boolean;
    isInModal(e: any): boolean;
    isTdInSelected(index: number): boolean;
    onMouseDown(event: any): void;
    onFocus(): void;
    onBlur(): void;
    onMouseup(event: any): void;
    onKeydown(event: any): void;
    onEtKeyup(event: KeyboardEvent): void;
    unbindMouseleaveListener(): void;
    ngOnDestroy(): void;
}
export declare class EditorModule {
}
